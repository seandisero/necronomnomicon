// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, hashed_password, created_at, updated_at)
VALUES (?, ?, DATETIME('now'), DATETIME('now'))
RETURNING id, username, created_at, updated_at
`

type CreateUserParams struct {
	Username       string
	HashedPassword string
}

type CreateUserRow struct {
	ID        int64
	Username  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.HashedPassword)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, created_at, updated_at, hashed_password FROM users WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HashedPassword,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, username, hashed_password, created_at, updated_at FROM users WHERE username = ?
`

type GetUserByNameRow struct {
	ID             int64
	Username       string
	HashedPassword string
	CreatedAt      time.Time
	UpdatedAt      time.Time
}

func (q *Queries) GetUserByName(ctx context.Context, username string) (GetUserByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, username)
	var i GetUserByNameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
