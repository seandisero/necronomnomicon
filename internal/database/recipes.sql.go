// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: recipes.sql

package database

import (
	"context"
	"database/sql"
)

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes(name, ingredients, steps, notes, created_by, created_at, updated_at) 
VALUES (?, ?, ?, ?, ?, DATETIME('now'), DATETIME('now'))
RETURNING id, created_at, updated_at, created_by, name, ingredients, steps, notes
`

type CreateRecipeParams struct {
	Name        string
	Ingredients string
	Steps       string
	Notes       sql.NullString
	CreatedBy   string
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, createRecipe,
		arg.Name,
		arg.Ingredients,
		arg.Steps,
		arg.Notes,
		arg.CreatedBy,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.Name,
		&i.Ingredients,
		&i.Steps,
		&i.Notes,
	)
	return i, err
}

const getAllRecipes = `-- name: GetAllRecipes :many
SELECT id, created_at, updated_at, created_by, name, ingredients, steps, notes FROM recipes
`

func (q *Queries) GetAllRecipes(ctx context.Context) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, getAllRecipes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.Name,
			&i.Ingredients,
			&i.Steps,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecipeByName = `-- name: GetRecipeByName :one
SELECT id, created_at, updated_at, created_by, name, ingredients, steps, notes FROM recipes
WHERE name = ?
`

func (q *Queries) GetRecipeByName(ctx context.Context, name string) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipeByName, name)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.Name,
		&i.Ingredients,
		&i.Steps,
		&i.Notes,
	)
	return i, err
}
