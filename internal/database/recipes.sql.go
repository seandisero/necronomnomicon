// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: recipes.sql

package database

import (
	"context"
	"database/sql"
)

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes(name, ingredients, steps, notes, created_by, creator_id, created_at, updated_at) 
VALUES (?, ?, ?, ?, ?, ?, DATETIME('now'), DATETIME('now'))
RETURNING id, created_at, updated_at, created_by, name, ingredients, steps, notes, creator_id
`

type CreateRecipeParams struct {
	Name        string
	Ingredients string
	Steps       string
	Notes       sql.NullString
	CreatedBy   string
	CreatorID   sql.NullInt64
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, createRecipe,
		arg.Name,
		arg.Ingredients,
		arg.Steps,
		arg.Notes,
		arg.CreatedBy,
		arg.CreatorID,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.Name,
		&i.Ingredients,
		&i.Steps,
		&i.Notes,
		&i.CreatorID,
	)
	return i, err
}

const deleteRecipe = `-- name: DeleteRecipe :exec
DELETE FROM recipes
WHERE id = ?
`

func (q *Queries) DeleteRecipe(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRecipe, id)
	return err
}

const editRecipe = `-- name: EditRecipe :one
UPDATE recipes
SET name = ?, ingredients = ?, steps = ?, notes = ?, updated_at = DATETIME('now')
WHERE id = ?
RETURNING id, created_at, updated_at, created_by, name, ingredients, steps, notes, creator_id
`

type EditRecipeParams struct {
	Name        string
	Ingredients string
	Steps       string
	Notes       sql.NullString
	ID          int64
}

func (q *Queries) EditRecipe(ctx context.Context, arg EditRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, editRecipe,
		arg.Name,
		arg.Ingredients,
		arg.Steps,
		arg.Notes,
		arg.ID,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.Name,
		&i.Ingredients,
		&i.Steps,
		&i.Notes,
		&i.CreatorID,
	)
	return i, err
}

const getAllRecipes = `-- name: GetAllRecipes :many
SELECT id, created_at, updated_at, created_by, name, ingredients, steps, notes, creator_id FROM recipes
`

func (q *Queries) GetAllRecipes(ctx context.Context) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, getAllRecipes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.Name,
			&i.Ingredients,
			&i.Steps,
			&i.Notes,
			&i.CreatorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUserRecipes = `-- name: GetAllUserRecipes :many
SELECT id, created_at, updated_at, created_by, name, ingredients, steps, notes, creator_id FROM recipes
WHERE creator_id = ?
`

func (q *Queries) GetAllUserRecipes(ctx context.Context, creatorID sql.NullInt64) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserRecipes, creatorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.Name,
			&i.Ingredients,
			&i.Steps,
			&i.Notes,
			&i.CreatorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecipeByID = `-- name: GetRecipeByID :one
SELECT id, created_at, updated_at, created_by, name, ingredients, steps, notes, creator_id FROM recipes
WHERE id = ?
`

func (q *Queries) GetRecipeByID(ctx context.Context, id int64) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipeByID, id)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.Name,
		&i.Ingredients,
		&i.Steps,
		&i.Notes,
		&i.CreatorID,
	)
	return i, err
}

const getRecipeByName = `-- name: GetRecipeByName :one
SELECT id, created_at, updated_at, created_by, name, ingredients, steps, notes, creator_id FROM recipes
WHERE name = ?
`

func (q *Queries) GetRecipeByName(ctx context.Context, name string) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipeByName, name)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.Name,
		&i.Ingredients,
		&i.Steps,
		&i.Notes,
		&i.CreatorID,
	)
	return i, err
}

const getUsersRecipeByID = `-- name: GetUsersRecipeByID :one
SELECT id, created_at, updated_at, created_by, name, ingredients, steps, notes, creator_id FROM recipes
WHERE id = ? AND creator_id = ?
`

type GetUsersRecipeByIDParams struct {
	ID        int64
	CreatorID sql.NullInt64
}

func (q *Queries) GetUsersRecipeByID(ctx context.Context, arg GetUsersRecipeByIDParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getUsersRecipeByID, arg.ID, arg.CreatorID)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.Name,
		&i.Ingredients,
		&i.Steps,
		&i.Notes,
		&i.CreatorID,
	)
	return i, err
}
